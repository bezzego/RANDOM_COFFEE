from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hitalic
import db

user_router = Router()


class RegistrationStates(StatesGroup):
    first_name = State()
    last_name = State()
    position = State()
    department = State()


def get_start_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration"
                ),
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_info"),
            ]
        ]
    )


def get_cancel_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )


@user_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    existing_user = db.get_user(user_id)

    if existing_user and existing_user[9]:  # is_active
        text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Random Coffee.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
        )
        await message.answer(text)
        return

    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee!\n"
        "–≠—Ç–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º ‚Äî "
        "—á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏–ª–∏ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ.\n\n"
        "üéØ –¶–µ–ª—å ‚Äî –Ω–∞–ª–∞–∂–∏–≤–∞—Ç—å —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ.\n\n"
        "üìù –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å, —É–∫–∞–∑–∞–≤ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "2. –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "3. –í—Å—Ç—Ä–µ—á–∞–µ—Ç–µ—Å—å –∑–∞ —á–∞—à–∫–æ–π –∫–æ—Ñ–µ\n\n"
        "–ù–∞—á–Ω–µ–º?"
    )
    await message.answer(text, reply_markup=get_start_kb())


@user_router.callback_query(F.data == "start_registration")
async def on_start_registration(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    existing_user = db.get_user(user_id)
    await state.clear()
    text = (
        "üìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã!\n\n"
        f"{hbold('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')}"
    )
    await call.message.answer(text, reply_markup=get_cancel_kb())
    await state.set_state(RegistrationStates.first_name)
    await call.answer()


@user_router.message(RegistrationStates.first_name)
async def process_first_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è."
        )
        return

    await state.update_data(first_name=name)
    await message.answer(
        f"üëå –û—Ç–ª–∏—á–Ω–æ, {name}! –¢–µ–ø–µ—Ä—å {hbold('–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')}",
        reply_markup=get_cancel_kb(),
    )
    await state.set_state(RegistrationStates.last_name)


@user_router.message(RegistrationStates.last_name)
async def process_last_name(message: Message, state: FSMContext):
    last_name = message.text.strip()
    if len(last_name) < 2:
        await message.answer(
            "‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–∞—Å—Ç–æ—è—â—É—é —Ñ–∞–º–∏–ª–∏—é."
        )
        return

    await state.update_data(last_name=last_name)
    await message.answer(
        f"üíº {hbold('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:')}\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Python\n"
        "‚Ä¢ –î–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
        reply_markup=get_cancel_kb(),
    )
    await state.set_state(RegistrationStates.position)


@user_router.message(RegistrationStates.position)
async def process_position(message: Message, state: FSMContext):
    position = message.text.strip()
    if len(position) < 3:
        await message.answer(
            "‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        )
        return

    await state.update_data(position=position)
    await message.answer(
        f"üè¢ {hbold('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:')}\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n"
        "‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥\n"
        "‚Ä¢ –§–∏–Ω–∞–Ω—Å—ã\n"
        "‚Ä¢ HR",
        reply_markup=get_cancel_kb(),
    )
    await state.set_state(RegistrationStates.department)


@user_router.message(RegistrationStates.department)
async def process_department(message: Message, state: FSMContext):
    department = message.text.strip()
    if len(department) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        )
        return

    data = await state.get_data()
    first_name = data.get("first_name", "")
    last_name = data.get("last_name", "")
    position = data.get("position", "")

    text = (
        f"{hbold('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:')}\n\n"
        f"üë§ {hbold('–ò–º—è:')} {first_name} {last_name}\n"
        f"üíº {hbold('–î–æ–ª–∂–Ω–æ—Å—Ç—å:')} {position}\n"
        f"üè¢ {hbold('–û—Ç–¥–µ–ª:')} {department}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    confirm_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_registration"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_registration"
                ),
            ]
        ]
    )

    await state.update_data(department=department)
    await message.answer(text, reply_markup=confirm_kb)


@user_router.callback_query(F.data == "confirm_registration")
async def on_confirm_registration(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = call.from_user.id
    username = call.from_user.username or ""

    new_user = db.ensure_user(
        user_id=user_id,
        username=username,
        first_name=data.get("first_name", ""),
        last_name=data.get("last_name", ""),
        position=data.get("position", ""),
        department=data.get("department", ""),
    )

    if new_user:
        text = (
            f"üéâ {hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ Random Coffee!\n\n"
            "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. "
            "–ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫."
        )
    else:
        text = (
            f"üîÑ {hbold('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')}\n\n"
            "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ Random Coffee –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
        )

    await call.message.edit_text(text)
    await call.answer()
    await state.clear()


@user_router.message(Command("profile"))
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)

    if not user_data:
        await message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    profile_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="start_registration"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirm_unsubscribe"
                )
            ],
        ]
    )

    text = (
        f"{hbold('üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:')}\n\n"
        f"–ò–º—è: {user_data[2]} {user_data[3]}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data[4]}\n"
        f"–û—Ç–¥–µ–ª: {user_data[5]}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω—ã–π ‚úÖ' if user_data[9] else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π ‚ùå'}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º:"
    )

    await message.answer(text, reply_markup=profile_kb)


@user_router.callback_query(F.data == "confirm_unsubscribe")
async def on_confirm_unsubscribe(call: CallbackQuery):
    user_id = call.from_user.id
    db.deactivate_user(user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    text = (
        f"{hbold('üëã –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç Random Coffee')}\n\n"
        "–ñ–∞–ª—å, —á—Ç–æ –≤—ã —É—Ö–æ–¥–∏—Ç–µ! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, "
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )

    await call.message.edit_text(text)
    await call.answer()


@user_router.callback_query(F.data == "cancel_unsubscribe")
async def on_cancel_unsubscribe(call: CallbackQuery):
    await call.message.delete()
    await cmd_profile(call.message)
    await call.answer()


@user_router.callback_query(F.data == "cancel_action")
async def on_cancel_action(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        reply_markup=get_start_kb(),
    )
    await call.answer()


@user_router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        f"{hbold('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')}\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        f"{hbold('–û —Å–µ—Ä–≤–∏—Å–µ:')}\n"
        "Random Coffee - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è "
        "—Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
