import logging
import random
import datetime
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

import db
from config import ADMIN_IDS

admin_router = Router()
awaiting_broadcast_admins = set()


@admin_router.message(Command("admin"))
async def cmd_admin_menu(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìå –ü—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É",
                    callback_data="admin_pair_force",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data="admin_broadcast"
                )
            ],
            [InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="admin_list")],
        ]
    )
    await message.answer(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


async def pair_users(bot: Bot) -> int:
    users = db.get_eligible_users()
    if len(users) < 2:
        return 0
    random.shuffle(users)
    pairs_count = 0
    paired_ids = []
    for i in range(0, len(users) - (len(users) % 2), 2):
        uid1, uname1, name1 = users[i]
        uid2, uname2, name2 = users[i + 1]
        partner_msg_1 = f"‚òï –¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ñ–µ: {name2}"
        partner_msg_2 = f"‚òï –¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ñ–µ: {name1}"
        partner_msg_1 += f" (@{uname2})" if uname2 else " (–Ω–µ—Ç username)"
        partner_msg_2 += f" (@{uname1})" if uname1 else " (–Ω–µ—Ç username)"
        try:
            await bot.send_message(uid1, partner_msg_1)
            await bot.send_message(uid2, partner_msg_2)
        except Exception as e:
            logging.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä–∞–º {uid1} –∏–ª–∏ {uid2}: {e}"
            )
        paired_ids.extend([uid1, uid2])
        pairs_count += 1
    if len(users) % 2 == 1:
        uid, uname, name = users[-1]
        try:
            await bot.send_message(
                uid,
                "‚òï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–∞—Ä—ã. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—ã —Ç–æ—á–Ω–æ –±—É–¥–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!",
            )
        except Exception as e:
            logging.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}"
            )
    db.update_last_participation(paired_ids)
    return pairs_count


async def pair_all_users(bot: Bot) -> int:
    users = db.get_all_users()
    if len(users) < 2:
        return 0
    random.shuffle(users)
    pairs_count = 0
    paired_ids = []
    for i in range(0, len(users) - (len(users) % 2), 2):
        uid1, uname1, name1 = users[i]
        uid2, uname2, name2 = users[i + 1]
        partner_msg_1 = f"‚òï –¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ñ–µ: {name2}"
        partner_msg_2 = f"‚òï –¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ñ–µ: {name1}"
        partner_msg_1 += f" (@{uname2})" if uname2 else " (–Ω–µ—Ç username)"
        partner_msg_2 += f" (@{uname1})" if uname1 else " (–Ω–µ—Ç username)"
        try:
            await bot.send_message(uid1, partner_msg_1)
            await bot.send_message(uid2, partner_msg_2)
        except Exception as e:
            logging.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä–∞–º {uid1} –∏–ª–∏ {uid2}: {e}"
            )
        paired_ids.extend([uid1, uid2])
        pairs_count += 1
    if len(users) % 2 == 1:
        uid, uname, name = users[-1]
        try:
            await bot.send_message(
                uid,
                "‚òï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–∞—Ä—ã. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—ã —Ç–æ—á–Ω–æ –±—É–¥–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!",
            )
        except Exception as e:
            logging.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}"
            )
    db.update_last_participation(paired_ids)
    return pairs_count


@admin_router.callback_query(lambda call: call.data == "admin_pair")
async def on_admin_pair_callback(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    pairs_made = await pair_users(call.bot)
    if pairs_made > 0:
        await call.answer("‚úÖ –ü–∞—Ä—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=False)
        await call.message.answer(
            f"üë• –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è {pairs_made*2} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({pairs_made} –ø–∞—Ä)."
        )
    else:
        await call.answer(
            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä.", show_alert=True
        )
        await call.message.answer(
            "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä."
        )


@admin_router.callback_query(lambda call: call.data == "admin_pair_force")
async def on_admin_pair_force_callback(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    pairs_made = await pair_all_users(call.bot)
    if pairs_made > 0:
        await call.answer("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=False)
        await call.message.answer(
            f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {pairs_made*2} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({pairs_made} –ø–∞—Ä)."
        )
    else:
        await call.answer(
            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä.", show_alert=True
        )
        await call.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä.")


@admin_router.callback_query(lambda call: call.data == "admin_broadcast")
async def on_admin_broadcast_callback(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await call.answer()
    awaiting_broadcast_admins.add(call.from_user.id)
    await call.message.answer(
        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
    )


@admin_router.callback_query(lambda call: call.data == "admin_list")
async def on_admin_list_callback(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ eligibility
    eligible = {u[0] for u in db.get_eligible_users()}
    cur = db.conn.execute(
        "SELECT user_id, username, full_name, frequency, last_participation FROM participants ORDER BY user_id"
    )
    rows = cur.fetchall()
    cur.close()
    if not rows:
        await call.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    lines = []
    today = datetime.date.today()
    for user_id, username, full_name, frequency, last_participation in rows:
        status = "‚úÖ –ì–æ—Ç–æ–≤" if user_id in eligible else "‚è≥ –ñ–¥—ë—Ç"
        if last_participation:
            try:
                last = datetime.date.fromisoformat(last_participation)
                since = (today - last).days
                lp = f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ {last.isoformat()} ({since} –¥–Ω. –Ω–∞–∑–∞–¥)"
            except Exception:
                lp = f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ {last_participation}"
        else:
            lp = "–µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"
        uname_display = f"@{username}" if username else "(–Ω–µ—Ç username)"
        lines.append(f"‚Ä¢ {full_name} {uname_display} ‚Äî {status}, {lp}")
    chunk = "\n".join(lines[:50])
    footer = "" if len(lines) <= 50 else f"\n...–∏ –µ—â—ë {len(lines)-50} —É—á–∞—Å—Ç–Ω–∏–∫–∞(–æ–≤)"
    await call.message.answer(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{chunk}{footer}")


@admin_router.message(Command("cancel"))
async def cmd_cancel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if message.from_user.id in awaiting_broadcast_admins:
        awaiting_broadcast_admins.remove(message.from_user.id)
        await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@admin_router.message()
async def on_admin_message(message: Message):
    if message.from_user.id in awaiting_broadcast_admins:
        broadcast_text = message.text
        awaiting_broadcast_admins.remove(message.from_user.id)
        users = db.get_all_users()
        success_count = 0
        for user_id, username, full_name in users:
            try:
                await message.bot.send_message(user_id, broadcast_text)
                success_count += 1
            except Exception as e:
                logging.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                )
                continue
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
