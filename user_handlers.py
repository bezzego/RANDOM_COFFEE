"""
User handlers: handles user commands and interactions (start, join, etc.).
"""

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

import db

user_router = Router()


@user_router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.
    """
    user_id = message.from_user.id
    username = message.from_user.username or ""
    full_name = message.from_user.full_name or message.from_user.first_name
    cur = db.conn.execute("SELECT 1 FROM participants WHERE user_id=?", (user_id,))
    already_registered = cur.fetchone() is not None
    cur.close()
    if already_registered:
        await message.answer(
            "üòä –ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee!\n"  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, —Ç.–∫. —Ç—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."
        )
    else:
        join_button = InlineKeyboardButton(text="‚òï –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[join_button]])
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee!\n"
            "–≠—Ç–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º ‚Äî —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏–ª–∏ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ.\n"
            "–ú—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã, –∏ –≤—ã –≤–º–µ—Å—Ç–µ –∏–¥—ë—Ç–µ –Ω–∞ –∫–æ—Ñ–µ, –æ–±–µ–¥ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á—É –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã ‚Äî –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é.\n"
            "üéØ –¶–µ–ª—å ‚Äî –Ω–∞–ª–∞–∂–∏–≤–∞—Ç—å —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏, —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É: –º—ã ‚Äî –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–æ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –º—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞.\n\n"
            "üìù –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
            "1. –í—Å–µ –∂–µ–ª–∞—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ –≤—ã–±–∏—Ä–∞—é—Ç —á–∞—Å—Ç–æ—Ç—É —É—á–∞—Å—Ç–∏—è –≤ –∂–µ—Ä–µ–±—å–µ–≤–∫–µ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü)\n"
            "2. –ù–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏\n"
            "3. –í –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –¥–∞—Ç—É —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–º—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏ –∫–∞–∫ —Å –Ω–∏–º –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è\n"
            "4. –í—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
            "5. –ü—å—ë—Ç–µ –∫–æ—Ñ–µ, –æ–±—Å—É–∂–¥–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã.\n\n"
            "ü§ù –ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ.\n"
            "–•–æ—Ä–æ—à–µ–π –±–µ—Å–µ–¥—ã –∏ –≤–∫—É—Å–Ω–æ–≥–æ –∫–æ—Ñ–µ ‚òï\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:"
        )
        await message.answer(welcome_text, reply_markup=keyboard)


@user_router.callback_query(lambda call: call.data == "join")
async def on_join_button(call: CallbackQuery):
    """
    Handle the user clicking the 'Participate' button to join the weekly pairing pool.
    """
    user_id = call.from_user.id
    username = call.from_user.username or ""
    full_name = call.from_user.full_name or call.from_user.first_name
    # Add the user to the database (or update if they exist)
    new_user = db.ensure_user(user_id, username, full_name)
    if new_user:
        # Successfully added a new participant
        await call.answer("–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!", show_alert=False)
        # Remove the keyboard to prevent duplicate joins
        if call.message:
            await call.message.edit_reply_markup(reply_markup=None)
        await call.message.answer(
            "‚úÖ –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ Random Coffee! –û–∂–∏–¥–∞–π –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é ‚òï."
        )
    else:
        # User was already registered
        await call.answer("–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å.", show_alert=True)
        if call.message:
            await call.message.edit_reply_markup(reply_markup=None)
