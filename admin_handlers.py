import logging
import random
import datetime
from user_handlers import send_reminder_after_pairing
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold, hitalic, hcode

import db
from config import ADMIN_IDS

admin_router = Router()
awaiting_actions = {}  # user_id: action_type

# Scheduler for reminders
scheduler = AsyncIOScheduler()
scheduler.start()


def get_admin_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É", callback_data="admin_pair_force"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast"
        ),
        InlineKeyboardButton(
            text="üìù –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_test_broadcast"
        ),
    )
    builder.row(
        InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="admin_list"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
    )
    return builder.as_markup()


@admin_router.message(Command("admin"))
async def cmd_admin_menu(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    text = f"{hbold('üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')}\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    await message.answer(text, reply_markup=get_admin_keyboard())


async def pair_users(bot: Bot, force_all=False) -> dict:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
    {
        "pairs_count": int,
        "users_paired": int,
        "users_without_pair": int,
        "failed_to_notify": list
    }
    """
    users = db.get_all_users() if force_all else db.get_eligible_users()
    result = {
        "pairs_count": 0,
        "users_paired": 0,
        "users_without_pair": 0,
        "failed_to_notify": [],
    }

    if len(users) < 2:
        return result

    random.shuffle(users)
    paired_ids = []

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
    for i in range(0, len(users) - (len(users) % 2), 2):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user1 = users[i]
        uid1 = user1[0]
        uname1 = user1[1]
        name1 = user1[2] if len(user1) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user2 = users[i + 1]
        uid2 = user2[0]
        uname2 = user2[1]
        name2 = user2[2] if len(user2) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ username –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–±–µ–∑ @, –Ω–µ –ø—É—Å—Ç–æ–π)
        uname1_clean = uname1.strip("@") if uname1 else "username_not_available"
        uname2_clean = uname2.strip("@") if uname2 else "username_not_available"

        department2 = user2[5] if user2[5] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        partner_msg_1 = (
            f"‚òï {hbold('–ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è Random Coffee!')}\n\n"
            f"üë§ {hbold('–ò–º—è:')} {name2}\n"
            f"üíº {hbold('–î–æ–ª–∂–Ω–æ—Å—Ç—å:')} {user2[4]}\n"
            f"üè¢ {hbold('–û—Ç–¥–µ–ª:')} {department2}\n"
            f"üì± {hbold('–ö–æ–Ω—Ç–∞–∫—Ç—ã:')} @{uname2}"
            if uname2
            else " (–Ω–µ—Ç username)" "\n\n–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
        )

        department1 = user1[5] if user1[5] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        partner_msg_2 = (
            f"‚òï {hbold('–ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è Random Coffee!')}\n\n"
            f"üë§ {hbold('–ò–º—è:')} {name1}\n"
            f"üíº {hbold('–î–æ–ª–∂–Ω–æ—Å—Ç—å:')} {user1[4]}\n"
            f"üè¢ {hbold('–û—Ç–¥–µ–ª:')} {department1}\n"
            f"üì± {hbold('–ö–æ–Ω—Ç–∞–∫—Ç—ã:')} @{uname1}"
            if uname1
            else " (–Ω–µ—Ç username)" "\n\n–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
        )

        success = True
        try:
            await bot.send_message(uid1, partner_msg_1)
            await bot.send_message(uid2, partner_msg_2)
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            run_date = datetime.datetime.now() + datetime.timedelta(days=3)
            scheduler.add_job(
                send_reminder_after_pairing,
                trigger="date",
                run_date=run_date,
                args=[uid1, name2, uname2_clean, bot],
            )
            scheduler.add_job(
                send_reminder_after_pairing,
                trigger="date",
                run_date=run_date,
                args=[uid2, name1, uname1_clean, bot],
            )
        except Exception as e:
            logging.error(f"Failed to notify pair {uid1} and {uid2}: {e}")
            result["failed_to_notify"].extend([uid1, uid2])
            success = False

        if success:
            paired_ids.extend([uid1, uid2])
            result["pairs_count"] += 1
            result["users_paired"] += 2

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä—ã
    if len(users) % 2 == 1:
        user = users[-1]
        uid = user[0]
        uname = user[1]
        name = user[2] if len(user) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        result["users_without_pair"] += 1

        msg = (
            f"‚òï {hbold('Random Coffee')}\n\n"
            "–í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å –¥–ª—è –≤–∞—Å –ø–∞—Ä—ã. "
            "–ü–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
        )

        try:
            await bot.send_message(uid, msg)
        except Exception as e:
            logging.error(f"Failed to notify user without pair {uid}: {e}")
            result["failed_to_notify"].append(uid)

    if paired_ids:
        db.update_last_participation(paired_ids)

    return result


@admin_router.callback_query(F.data == "admin_pair_force")
async def on_admin_pair_force(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã...")

    result = await pair_users(call.bot, force_all=True)

    if result["pairs_count"] > 0:
        text = (
            f"{hbold('‚úÖ –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')}\n\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä: {result['pairs_count']}\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–∞—Ä–æ–π: {result['users_paired']}\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –ø–∞—Ä—ã: {result['users_without_pair']}\n"
        )

        if result["failed_to_notify"]:
            text += f"\n{hitalic('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å:')} {len(result['failed_to_notify'])} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    else:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    await call.message.edit_text(text)
    await call.message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard()
    )


@admin_router.callback_query(F.data == "admin_broadcast")
async def on_admin_broadcast(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    awaiting_actions[call.from_user.id] = "broadcast"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )

    await call.message.edit_text(
        f"{hbold('üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º')}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞.\n\n"
        f"{hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel')}",
        reply_markup=keyboard,
    )
    await call.answer()


@admin_router.callback_query(F.data == "admin_test_broadcast")
async def on_admin_test_broadcast(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    awaiting_actions[call.from_user.id] = "test_broadcast"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
        ]
    )

    await call.message.edit_text(
        f"{hbold('üì¢ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã).\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π.\n\n"
        f"{hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel')}",
        reply_markup=keyboard,
    )
    await call.answer()


@admin_router.callback_query(F.data == "admin_list")
async def on_admin_list(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

    eligible = {u[0] for u in db.get_eligible_users()}
    cur = db.conn.execute(
        "SELECT user_id, username, full_name, frequency, last_participation FROM participants ORDER BY full_name"
    )
    rows = cur.fetchall()
    cur.close()

    if not rows:
        await call.message.answer("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    total = len(rows)
    active = sum(1 for row in rows if row[0] in eligible)

    text = (
        f"{hbold('üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ Random Coffee')}\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–≥–æ—Ç–æ–≤—ã—Ö –∫ –∂–µ—Ä–µ–±—å–µ–≤–∫–µ): {active}\n"
        f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total - active}\n\n"
        f"{hbold('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:')}\n"
    )

    for row in rows[:10]:
        user_id, username, full_name, frequency, last_participation = row
        status = "‚úÖ" if user_id in eligible else "‚è∏"
        username_display = f"@{username}" if username else "–Ω–µ—Ç username"
        last_part = (
            f", –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_participation}" if last_participation else ""
        )
        text += f"{status} {full_name} ({username_display}){last_part}\n"

    if total > 10:
        text += f"\n...–∏ –µ—â—ë {total - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="admin_export_csv"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")],
        ]
    )

    await call.message.edit_text(text, reply_markup=keyboard)


@admin_router.callback_query(F.data == "admin_stats")
async def on_admin_stats(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.answer("‚è≥ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = db.conn.execute("SELECT COUNT(*) FROM participants").fetchone()[0]
    active_users = len(db.get_eligible_users())

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–∏—é
    participation_stats = db.conn.execute(
        "SELECT last_participation, COUNT(*) FROM participants "
        "WHERE last_participation IS NOT NULL "
        "GROUP BY last_participation ORDER BY last_participation DESC LIMIT 5"
    ).fetchall()

    text = (
        f"{hbold('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Random Coffee')}\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
        f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_users - active_users}\n\n"
        f"{hbold('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–∞—Å—Ç–∏—è:')}\n"
    )

    for date, count in participation_stats:
        text += f"‚Ä¢ {date}: {count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    freq_stats = db.conn.execute(
        "SELECT frequency, COUNT(*) FROM participants GROUP BY frequency ORDER BY frequency"
    ).fetchall()

    text += f"\n{hbold('–ß–∞—Å—Ç–æ—Ç–∞ —É—á–∞—Å—Ç–∏—è:')}\n"
    for freq, count in freq_stats:
        text += f"‚Ä¢ –†–∞–∑ –≤ {freq} –Ω–µ–¥–µ–ª—å: {count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")],
        ]
    )

    await call.message.edit_text(text, reply_markup=keyboard)


@admin_router.callback_query(F.data == "admin_export_csv")
async def on_admin_export_csv(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

    cur = db.conn.execute(
        "SELECT user_id, username, full_name, position, department, frequency, last_participation "
        "FROM participants ORDER BY full_name"
    )
    rows = cur.fetchall()
    cur.close()

    if not rows:
        await call.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    csv_content = (
        "ID;Username;Full Name;Position;Department;Frequency;Last Participation\n"
    )
    for row in rows:
        csv_content += ";".join(str(x) if x is not None else "" for x in row) + "\n"

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
    preview = "\n".join(csv_content.split("\n")[:6])

    await call.message.answer(
        f"{hbold('üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):')}\n"
        f"{hcode(preview)}\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª."
    )
    await call.answer()


@admin_router.callback_query(F.data == "admin_back_to_menu")
async def on_admin_back_to_menu(call: CallbackQuery):
    await call.message.edit_text(
        f"{hbold('üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
    )
    await call.answer()


@admin_router.callback_query(F.data == "cancel_action")
async def on_cancel_action(call: CallbackQuery):
    if call.from_user.id in awaiting_actions:
        del awaiting_actions[call.from_user.id]
    await call.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard()
    )
    await call.answer()


@admin_router.message(Command("cancel"))
async def cmd_cancel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if message.from_user.id in awaiting_actions:
        action = awaiting_actions.pop(message.from_user.id)
        await message.answer(
            f"‚ùå {hbold('–û—Ç–º–µ–Ω–µ–Ω–æ:')} {action.replace('_', ' ')}",
            reply_markup=get_admin_keyboard(),
        )
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@admin_router.message()
async def on_admin_message(message: Message, bot: Bot):
    if message.from_user.id not in ADMIN_IDS:
        return

    action = awaiting_actions.get(message.from_user.id)

    if not action:
        return

    if action == "test_broadcast":
        # –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
        try:
            await message.copy_to(message.from_user.id)
            await message.answer(
                "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º. "
                "–ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.",
                reply_markup=get_admin_keyboard(),
            )
        except Exception as e:
            logging.error(f"Failed to send test broadcast: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=get_admin_keyboard(),
            )
        finally:
            awaiting_actions.pop(message.from_user.id, None)

    elif action == "broadcast":
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        users = db.get_all_users()
        total = len(users)
        success = 0
        failed = []

        await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user in users:
            user_id = user[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.copy_to(user_id)
                success += 1
            except Exception as e:
                logging.error(f"Failed to send broadcast to {user_id}: {e}")
                failed.append(user_id)
                continue

        text = (
            f"{hbold('üì¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:')}\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {len(failed)}\n"
        )

        if failed:
            text += f"\n{hitalic('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:')} –ø–µ—Ä–≤—ã–µ 10 ID: {', '.join(map(str, failed[:10]))}"

        await message.answer(text, reply_markup=get_admin_keyboard())
        awaiting_actions.pop(message.from_user.id, None)
